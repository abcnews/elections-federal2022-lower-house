import concaveman from 'concaveman';

type Cell = [number, number]; //  [row, column]
type Point = [number, number]; // [x, y]
type Points = Point[];

interface StatesShapesPaths {
  [stateID: string]: string[];
}

interface StatesShapesPoints {
  [stateID: string]: Points[];
}

type StateLabel = [number, number, boolean?];

type StatesLabels = {
  [key: string]: StateLabel;
};

export const HEX_SIZE = 17;
export const HEX_WIDTH = Math.sqrt(3) * HEX_SIZE;
export const HEX_HEIGHT = 2 * HEX_SIZE;
export const HEXGRID_CELLS_WIDE = 35;
export const HEXGRID_CELLS_HIGH = 29;
export const HEXGRID_PROPS = {
  width: HEXGRID_CELLS_WIDE * HEX_WIDTH,
  height: (HEXGRID_CELLS_HIGH + 0.33) * ((HEX_HEIGHT / 4) * 3),
  margin: 2
};

const STATES_DELEGATE_CELLS = {
  AK: [
    [1, 22],
    [0, 23],
    [1, 23]
  ],
  AL: [
    [17, 18],
    [18, 18],
    [16, 19],
    [17, 19],
    [17, 20],
    [18, 20],
    [17, 21],
    [18, 21],
    [17, 22]
  ],
  AR: [
    [14, 14],
    [13, 15],
    [14, 15],
    [14, 16],
    [13, 17],
    [14, 17]
  ],
  AZ: [
    [7, 14],
    [6, 15],
    [7, 15],
    [7, 16],
    [6, 17],
    [7, 17],
    [7, 18],
    [6, 19],
    [7, 19],
    [6, 20],
    [7, 20]
  ],
  CA: [
    [1, 8],
    [2, 8],
    [3, 8],
    [4, 8],
    [5, 8],
    [1, 9],
    [2, 9],
    [3, 9],
    [4, 9],
    [1, 10],
    [2, 10],
    [3, 10],
    [4, 10],
    [5, 10],
    [1, 11],
    [2, 11],
    [3, 11],
    [4, 11],
    [5, 11],
    [1, 12],
    [2, 12],
    [3, 12],
    [4, 12],
    [5, 12],
    [2, 13],
    [3, 13],
    [4, 13],
    [5, 13],
    [6, 13],
    [1, 14],
    [2, 14],
    [3, 14],
    [4, 14],
    [5, 14],
    [6, 14],
    [1, 15],
    [2, 15],
    [3, 15],
    [4, 15],
    [5, 15],
    [2, 16],
    [3, 16],
    [4, 16],
    [5, 16],
    [6, 16],
    [2, 17],
    [3, 17],
    [4, 17],
    [5, 17],
    [3, 18],
    [4, 18],
    [5, 18],
    [6, 18],
    [4, 19],
    [5, 19]
  ],
  CO: [
    [8, 8],
    [8, 9],
    [8, 10],
    [9, 10],
    [8, 11],
    [8, 12],
    [9, 12],
    [8, 13],
    [8, 14]
  ],
  CT: [
    [30, 6],
    [31, 6],
    [32, 6],
    [29, 7],
    [30, 7],
    [31, 7],
    [32, 7]
  ],
  DC: [
    [28, 13],
    [28, 14],
    [28, 15]
  ],
  DE: [
    [30, 12],
    [30, 13],
    [31, 14]
  ],
  FL: [
    [18, 22],
    [19, 22],
    [20, 22],
    [21, 22],
    [22, 22],
    [23, 22],
    [19, 23],
    [20, 23],
    [21, 23],
    [22, 23],
    [20, 24],
    [21, 24],
    [22, 24],
    [23, 24],
    [19, 25],
    [20, 25],
    [21, 25],
    [22, 25],
    [20, 26],
    [21, 26],
    [22, 26],
    [23, 26],
    [20, 27],
    [21, 27],
    [22, 27],
    [23, 27],
    [21, 28],
    [22, 28],
    [23, 28]
  ],
  GA: [
    [19, 18],
    [20, 18],
    [21, 18],
    [18, 19],
    [19, 19],
    [20, 19],
    [21, 19],
    [19, 20],
    [20, 20],
    [21, 20],
    [22, 20],
    [19, 21],
    [20, 21],
    [21, 21],
    [22, 21],
    [23, 21]
  ],
  HI: [
    [4, 25],
    [6, 26],
    [7, 27],
    [7, 28]
  ],
  IA: [
    [11, 9],
    [12, 9],
    [13, 9],
    [12, 10],
    [13, 10],
    [14, 10]
  ],
  ID: [
    [7, 5],
    [8, 6],
    [7, 7],
    [8, 7]
  ],
  IL: [
    [14, 9],
    [15, 9],
    [16, 9],
    [17, 9],
    [15, 10],
    [16, 10],
    [17, 10],
    [14, 11],
    [15, 11],
    [16, 11],
    [17, 11],
    [15, 12],
    [16, 12],
    [17, 12],
    [15, 13],
    [16, 13],
    [17, 13],
    [15, 14],
    [16, 14],
    [17, 14]
  ],
  IN: [
    [18, 9],
    [19, 9],
    [18, 10],
    [19, 10],
    [18, 11],
    [19, 11],
    [18, 12],
    [19, 12],
    [18, 13],
    [19, 13],
    [18, 14]
  ],
  KS: [
    [9, 11],
    [10, 11],
    [10, 12],
    [11, 12],
    [9, 13],
    [10, 13]
  ],
  KY: [
    [19, 14],
    [20, 14],
    [15, 15],
    [16, 15],
    [17, 15],
    [18, 15],
    [19, 15],
    [20, 15]
  ],
  LA: [
    [14, 18],
    [13, 19],
    [14, 19],
    [14, 20],
    [13, 21],
    [14, 21],
    [15, 21],
    [15, 22]
  ],
  MA: [
    [32, 3],
    [30, 4],
    [31, 4],
    [32, 4],
    [33, 4],
    [29, 5],
    [30, 5],
    [31, 5],
    [32, 5],
    [33, 5],
    [34, 5]
  ],
  MD: [
    [25, 12],
    [26, 12],
    [27, 12],
    [28, 12],
    [29, 12],
    [26, 13],
    [29, 13],
    [29, 14],
    [30, 14],
    [29, 15]
  ],
  ME: [
    [32, 0],
    [33, 0],
    [32, 1],
    [32, 2]
  ],
  MI: [
    [17, 4],
    [18, 4],
    [17, 5],
    [19, 5],
    [20, 5],
    [19, 6],
    [20, 6],
    [21, 6],
    [22, 6],
    [18, 7],
    [19, 7],
    [20, 7],
    [21, 7],
    [19, 8],
    [20, 8],
    [21, 8]
  ],
  MN: [
    [12, 5],
    [13, 5],
    [14, 5],
    [12, 6],
    [13, 6],
    [12, 7],
    [13, 7],
    [12, 8],
    [13, 8],
    [14, 8]
  ],
  MO: [
    [11, 11],
    [12, 11],
    [13, 11],
    [12, 12],
    [13, 12],
    [14, 12],
    [11, 13],
    [12, 13],
    [13, 13],
    [14, 13]
  ],
  MS: [
    [15, 18],
    [16, 18],
    [15, 19],
    [15, 20],
    [16, 20],
    [16, 21]
  ],
  MT: [
    [8, 5],
    [9, 5],
    [10, 6]
  ],
  NC: [
    [21, 16],
    [22, 16],
    [23, 16],
    [24, 16],
    [25, 16],
    [26, 16],
    [27, 16],
    [20, 17],
    [21, 17],
    [22, 17],
    [23, 17],
    [24, 17],
    [25, 17],
    [26, 17],
    [27, 18]
  ],
  ND: [
    [10, 5],
    [11, 5],
    [11, 6]
  ],
  NE: [
    [10, 8],
    [9, 9],
    [10, 9],
    [10, 10],
    [11, 10]
  ],
  NH: [
    [31, 1],
    [31, 2],
    [30, 3],
    [31, 3]
  ],
  NJ: [
    [28, 9],
    [29, 9],
    [30, 9],
    [31, 9],
    [29, 10],
    [30, 10],
    [31, 10],
    [32, 10],
    [28, 11],
    [29, 11],
    [30, 11],
    [31, 11],
    [31, 12],
    [32, 12]
  ],
  NM: [
    [8, 15],
    [8, 16],
    [8, 17],
    [8, 18],
    [8, 19]
  ],
  NV: [
    [6, 8],
    [5, 9],
    [6, 9],
    [6, 10],
    [6, 11],
    [6, 12]
  ],
  NY: [
    [28, 1],
    [29, 1],
    [28, 2],
    [29, 2],
    [27, 3],
    [28, 3],
    [27, 4],
    [28, 4],
    [29, 4],
    [24, 5],
    [25, 5],
    [26, 5],
    [27, 5],
    [28, 5],
    [24, 6],
    [25, 6],
    [26, 6],
    [27, 6],
    [28, 6],
    [29, 6],
    [23, 7],
    [24, 7],
    [25, 7],
    [26, 7],
    [27, 7],
    [28, 7],
    [28, 8],
    [29, 8],
    [30, 8]
  ],
  OH: [
    [20, 9],
    [21, 9],
    [22, 9],
    [20, 10],
    [21, 10],
    [22, 10],
    [23, 10],
    [20, 11],
    [21, 11],
    [22, 11],
    [20, 12],
    [21, 12],
    [22, 12],
    [23, 12],
    [20, 13],
    [21, 13],
    [22, 13],
    [21, 14]
  ],
  OK: [
    [9, 14],
    [10, 14],
    [11, 14],
    [12, 14],
    [13, 14],
    [11, 15],
    [12, 15]
  ],
  OR: [
    [0, 7],
    [1, 7],
    [2, 7],
    [3, 7],
    [4, 7],
    [5, 7],
    [6, 7]
  ],
  PA: [
    [23, 8],
    [24, 8],
    [25, 8],
    [26, 8],
    [27, 8],
    [23, 9],
    [24, 9],
    [25, 9],
    [26, 9],
    [27, 9],
    [24, 10],
    [25, 10],
    [26, 10],
    [27, 10],
    [28, 10],
    [23, 11],
    [24, 11],
    [25, 11],
    [26, 11],
    [27, 11]
  ],
  RI: [
    [33, 6],
    [34, 6],
    [33, 7],
    [34, 7]
  ],
  SC: [
    [22, 18],
    [23, 18],
    [24, 18],
    [25, 18],
    [22, 19],
    [23, 19],
    [24, 19],
    [23, 20],
    [24, 20]
  ],
  SD: [
    [10, 7],
    [11, 7],
    [11, 8]
  ],
  TN: [
    [15, 16],
    [16, 16],
    [17, 16],
    [18, 16],
    [19, 16],
    [20, 16],
    [15, 17],
    [16, 17],
    [17, 17],
    [18, 17],
    [19, 17]
  ],
  TX: [
    [9, 15],
    [10, 15],
    [9, 16],
    [10, 16],
    [11, 16],
    [12, 16],
    [13, 16],
    [9, 17],
    [10, 17],
    [11, 17],
    [12, 17],
    [9, 18],
    [10, 18],
    [11, 18],
    [12, 18],
    [13, 18],
    [9, 19],
    [10, 19],
    [11, 19],
    [12, 19],
    [9, 20],
    [10, 20],
    [11, 20],
    [12, 20],
    [13, 20],
    [9, 21],
    [10, 21],
    [11, 21],
    [12, 21],
    [10, 22],
    [11, 22],
    [12, 22],
    [9, 23],
    [10, 23],
    [11, 23],
    [10, 24],
    [11, 24],
    [12, 24]
  ],
  UT: [
    [7, 8],
    [7, 9],
    [7, 10],
    [7, 11],
    [7, 12],
    [7, 13]
  ],
  VA: [
    [25, 13],
    [27, 13],
    [22, 14],
    [25, 14],
    [26, 14],
    [27, 14],
    [21, 15],
    [22, 15],
    [23, 15],
    [24, 15],
    [25, 15],
    [26, 15],
    [27, 15]
  ],
  VT: [
    [30, 1],
    [30, 2],
    [29, 3]
  ],
  WA: [
    [2, 5],
    [3, 5],
    [4, 5],
    [5, 5],
    [6, 5],
    [1, 6],
    [2, 6],
    [3, 6],
    [4, 6],
    [5, 6],
    [6, 6],
    [7, 6]
  ],
  WI: [
    [14, 6],
    [15, 6],
    [16, 6],
    [17, 6],
    [14, 7],
    [15, 7],
    [16, 7],
    [15, 8],
    [16, 8],
    [17, 8]
  ],
  WV: [
    [24, 12],
    [23, 13],
    [24, 13],
    [23, 14],
    [24, 14]
  ],
  WY: [
    [9, 6],
    [9, 7],
    [9, 8]
  ]
};

const getCellHexTopPoint = ([col, row]: Cell): Point => [
  HEX_WIDTH * (col + 0.5 * (row & 1)),
  ((HEX_SIZE * 3) / 2) * row
];

const getCellHexPoints = (cell: Cell) => {
  const [x, y] = getCellHexTopPoint(cell);

  return [
    [x - HEX_WIDTH / 2, y + (HEX_HEIGHT / 4) * 3].map(Math.round),
    [x, y + HEX_HEIGHT].map(Math.round),
    [x + HEX_WIDTH / 2, y + (HEX_HEIGHT / 4) * 3].map(Math.round),
    [x + HEX_WIDTH / 2, y + HEX_HEIGHT / 4].map(Math.round),
    [x, y].map(Math.round),
    [x - HEX_WIDTH / 2, y + HEX_HEIGHT / 4].map(Math.round),
    [x - HEX_WIDTH / 2, y + (HEX_HEIGHT / 4) * 3].map(Math.round)
  ];
};

const pointsToPath = (points: Points) => `M${points.map(point => point.join(',')).join(' ')}`;

export const STATES_DELEGATES_POINTS: StatesShapesPoints = Object.keys(STATES_DELEGATE_CELLS).reduce(
  (memo, key) => ({
    ...memo,
    [key]: STATES_DELEGATE_CELLS[key].map((cell: Cell) => getCellHexPoints(cell))
  }),
  {} as StatesShapesPoints
);

export const STATES_DELEGATES_PATHS: StatesShapesPaths = Object.keys(STATES_DELEGATES_POINTS).reduce(
  (memo, key) => ({
    ...memo,
    [key]: STATES_DELEGATES_POINTS[key].map(points => pointsToPath(points))
  }),
  {} as StatesShapesPaths
);

export const STATES_POINTS: StatesShapesPoints = Object.keys(STATES_DELEGATES_POINTS).reduce((memo, key) => {
  const delegatesPoints: Points[] = STATES_DELEGATES_POINTS[key];

  const allPoints = delegatesPoints.reduce((memo, delegatePoints) => [...memo, ...delegatePoints], [] as Points);

  const uniquePoints = allPoints.reduce((memo, point) => {
    if (memo.find(([x, y]) => point[0] === x && point[1] === y)) {
      return memo;
    }

    return [...memo, point];
  }, [] as Points);

  return {
    ...memo,
    [key]: [concaveman(uniquePoints, 0.8, HEX_SIZE) as Points]
  };
}, {} as StatesShapesPoints);

export const STATES_PATHS: StatesShapesPaths = Object.keys(STATES_POINTS).reduce(
  (memo, key) => ({
    ...memo,
    [key]: STATES_POINTS[key].map(points => pointsToPath(points))
  }),
  {} as StatesShapesPaths
);

export const COUNTRY_POINTS: Points = concaveman(
  Object.keys(STATES_POINTS)
    .filter(key => key !== 'AK' && key !== 'HI')
    .reduce((memo, key) => [...memo, ...STATES_POINTS[key][0]], [] as Points)
    .reduce((memo, point) => {
      if (memo.find(([x, y]) => point[0] === x && point[1] === y)) {
        return memo;
      }

      return [...memo, point];
    }, [] as Points),
  0.8,
  HEX_SIZE
) as Points;

export const COUNTRY_PATHS = [pointsToPath(COUNTRY_POINTS)];

export const STATES_LABELS: StatesLabels = {
  AK: [30, 599],
  AL: [518, 530],
  AR: [415, 404],
  AZ: [206, 453],
  CA: [111, 363],
  CO: [252, 276],
  CT: [918, 184],
  DC: [829, 376, true],
  DE: [903, 350, true],
  FL: [628, 658],
  GA: [600, 517],
  HI: [178, 686, true],
  IA: [378, 261],
  ID: [237, 171, true],
  IL: [474, 312],
  IN: [555, 312],
  KS: [304, 325],
  KY: [577, 389],
  LA: [415, 506],
  MA: [947, 135],
  MD: [873, 376],
  ME: [962, 29, true],
  MI: [592, 188],
  MN: [378, 184],
  MO: [385, 325],
  MS: [459, 522, true],
  MT: [281, 148, true],
  NC: [703, 442],
  ND: [326, 158, true],
  NE: [296, 250, true],
  NH: [918, 88],
  NJ: [896, 286],
  NM: [252, 453, true],
  NV: [178, 250],
  NY: [800, 173],
  OH: [637, 312],
  OK: [356, 389],
  OR: [104, 197, true],
  PA: [755, 261],
  RI: [999, 184],
  SC: [696, 504],
  SD: [326, 209, true],
  TN: [518, 440],
  TX: [326, 517],
  UT: [207, 276, true],
  VA: [754, 388],
  VT: [888, 70, true],
  WA: [118, 158],
  WI: [459, 197],
  WV: [703, 360],
  WY: [281, 197, true]
};
