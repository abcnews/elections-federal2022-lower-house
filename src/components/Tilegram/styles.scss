@import '../../constants.scss';

// TappableLayer enum

$TappableLayer_Electorates: 0;

// Focus management

$opacityUnfocused: 0.05;
$opacityUnfocusedInspecting: 0.5;
$focusChangeTransitionDuration: 0.5s;

@mixin fadedOutTransitionable {
  transition: opacity $focusChangeTransitionDuration;
}

@mixin fadedOut {
  opacity: $opacityUnfocused;
}

@mixin fadedOutInspecting {
  opacity: $opacityUnfocusedInspecting;
  transition: opacity 0s;
}

// Styles

.root {
  position: relative;
  width: 100%;
  height: 0;
  padding: 0;
  /* padding-bottom will be defined by JS */
}

@media (orientation: landscape) and (max-height: 50rem) {
  .root {
    padding-bottom: 0 !important;
    height: 32rem;
  }
}

@media (orientation: landscape) and (max-height: 25rem) {
  .root {
    padding-bottom: 0 !important;
    height: 16rem;
  }
}

.svg {
  position: absolute;
  height: 100%;
  width: 100%;
  left: 0;
  top: 0;
  stroke-linecap: round;
}

.baseOuter {
  stroke: $color_Grey;
  stroke-width: $swLight;
  // stroke-width: $swMedium;
  fill: none;
  @include fadedOutTransitionable;

  @media (max-width: 667px) {
    stroke-width: $swLight_SM;
    // stroke-width: $swMedium_SM;
  }
}

.root[data-has-focuses] .baseOuter {
  @include fadedOut;
}

.root[data-has-focuses][data-is-inspecting] .baseOuter {
  @include fadedOutInspecting;
}

.baseInner {
  stroke: none;
  fill: rgba(0, 0, 0, 0.025);
}

.electoratesBackgrounds {
  pointer-events: none;
  shape-rendering: crispEdges;
}

.root[data-is-interactive][data-tappable='#{$TappableLayer_Electorates}'] .electoratesBackgrounds {
  pointer-events: all;
}

.electorateBackground {
  @include fadedOutTransitionable;
}

.root[data-has-focuses] .electorateBackground[data-focus='#{$Focus_No}'] {
  @include fadedOut;
}

.root[data-has-focuses][data-is-inspecting] .electorateBackground[data-focus='#{$Focus_No}'] {
  @include fadedOutInspecting;
}

.electorateBackgroundPolygon {
  fill: $color_White;
  stroke: none;
  stroke-width: $swHeavy;
  stroke-linejoin: round;
  stroke-linecap: round;
  transition: fill $allocationTransitionDuration;

  @media (max-width: 667px) {
    stroke-width: $swHeavy_SM;
  }
}

.electorateBackgroundPolygon[data-allocation] {
  fill: var(--color-allocation);
}

@keyframes flipAllocations {
  0% {
    fill: $color_White;
    stroke: var(--color-relative-allocation);
    transform: none;
  }
  49.99% {
    fill: $color_White;
    stroke: var(--color-relative-allocation);
    // transform: rotateX(90deg);
    transform: rotateY(90deg);
  }
  50% {
    fill: var(--color-allocation);
    stroke: none;
    // transform: rotateX(-90deg);
    transform: rotateY(-90deg);
  }
  100% {
    fill: var(--color-allocation);
    stroke: none;
    transform: none;
  }
}

.electorateBackgroundPolygon[data-should-flip] {
  animation: flipAllocations $allocationTransitionDuration linear 1 both;
}

.root[data-is-interactive][data-tappable='#{$TappableLayer_Electorates}'] .electorateBackgroundPolygon {
  cursor: pointer;
}

.electoratesBorders {
  pointer-events: none;
}

.electorateBorder {
  @include fadedOutTransitionable;
}

.root[data-has-focuses] .electorateBorder[data-focus='#{$Focus_No}'] {
  @include fadedOut;
}

.root[data-has-focuses][data-is-inspecting] .electorateBorder[data-focus='#{$Focus_No}'] {
  @include fadedOutInspecting;
}

.electorateBorderPolygon {
  pointer-events: none;
  fill: none;
  stroke: $color_Grey;
  stroke-width: $swLight;

  @media (max-width: 667px) {
    stroke-width: $swLight_SM;
  }
}

.electorateBorderPolygon[data-focus='#{$Focus_No}'][data-has-allocation],
.electorateBorderPolygon[data-focus='#{$Focus_Yes}'] {
  stroke: var(--color-focus);
}

.electorateBorderPolygon[data-focus='#{$Focus_Yes}'] {
  stroke-width: $swHeavy;

  @media (max-width: 667px) {
    stroke-width: $swHeavy_SM;
  }
}

.electorateBorderPolygon[data-focus='#{$Focus_Yes}'][data-relative-allocation] {
  stroke: var(--color-relative-allocation);
}

.electorateBorderPolygon[data-focus='#{$Focus_Yes}'][data-has-definitive-allocation] {
  stroke: none;
}

.electorateBorderPolygon[data-focus='#{$Focus_Yes}'][data-was-preserved] {
  stroke: var(--color-allocation);
}

.electoratesPartitions {
  pointer-events: none;
  opacity: 0;
}

.root[data-has-focuses] .electoratesPartitions {
  opacity: 1;
}

.electoratePartition {
  fill: none;
  stroke: none;
  stroke-width: $swLight;

  @media (max-width: 667px) {
    stroke-width: $swLight_SM;
  }
}

.electoratePartition[data-focus='#{$Focus_Yes}'],
.electoratePartition[data-focus='#{$Focus_No}'][data-has-definitive-allocation] {
  stroke: $color_BG;
}

.root[data-has-focuses] .electoratePartition[data-focus='#{$Focus_No}'] {
  stroke: none;
}

.labels {
  pointer-events: none;
}

.label {
  text-anchor: middle;
  font-size: 1rem;
  @include fadedOutTransitionable;

  @media (max-width: 667px) {
    transform: translate(0, 0.25rem);
    font-size: 1.5rem;
  }
}

.root[data-has-focuses] .label[data-focus='#{$Focus_No}'] {
  opacity: 0;
}

.root[data-has-focuses][data-is-inspecting] .label[data-focus='#{$Focus_No}'] {
  @include fadedOutInspecting;
  opacity: 1;
}

.label > * {
  text-anchor: middle;
  font-size: 1.5rem;

  @media (min-width: 668px) {
    font-size: 1rem;
  }
}

.labelText {
  fill: $color_Text;
}

.label[data-has-definitive-allocation] > .labelText {
  fill: $color_BG;
}
