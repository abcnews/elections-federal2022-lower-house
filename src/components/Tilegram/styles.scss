@import '../../lib/constants.scss';

// Root

.root {
  position: relative;
  width: 100%;
  height: 0;
  padding: 0 0 100% 0;
  --color-allocation: #{$color_White};
}

@media (orientation: landscape) and (max-height: 50rem) {
  .root {
    padding-bottom: 0 !important;
    height: 32rem;
  }
}

@media (orientation: landscape) and (max-height: 25rem) {
  .root {
    padding-bottom: 0 !important;
    height: 16rem;
  }
}

.svg {
  position: absolute;
  height: 100%;
  width: 100%;
  left: 0;
  top: 0;
  stroke-linecap: round;
  stroke-linejoin: round;
}

// This polygon only has a stroke/strokeWidth to fix a Chrome rendering bug
// where hairline box fragments are drawn around elements which use clipping
.svg defs[data-is-chrome] > clipPath > polygon {
  stroke: $color_Black;
  stroke-width: $swHeavy * 2;
}

// Base

.base {
  stroke: none;
  fill: $color_LightGrey;
  transition: filter $durationDefault;
}

.root[data-layer='#{$Layer_ELECTORATES}'][data-has-focuses] .base {
  filter: brightness(1.105);
}

.root[data-layer='#{$Layer_STATES}'] .base {
  filter: brightness(2);
}

// Electorates

.electorates {
  transition: opacity $durationDefault;
}

.root:not([data-layer='#{$Layer_ELECTORATES}']) .electorates {
  opacity: 0;
}

.electorate {
  pointer-events: none;
  transition: opacity $durationDefault;
}

.root[data-has-focuses] .electorate[data-focus='#{$NoYes_No}'] {
  opacity: $opacityFadedOut;
}

.root[data-has-focuses][data-is-inspecting] .electorate[data-focus='#{$NoYes_No}'] {
  opacity: $opacityFadedOutInspecting;
  transition: none;
}

// Electorates (Hexes)

@keyframes electorateHexFlip {
  0% {
    fill: $color_White;
    stroke: var(--color-relative-allocation);
    transform: none;
  }
  49.99% {
    fill: $color_White;
    stroke: var(--color-relative-allocation);
    // transform: rotateX(90deg);
    transform: rotateY(90deg);
  }
  50% {
    fill: var(--color-allocation);
    stroke: none;
    // transform: rotateX(-90deg);
    transform: rotateY(-90deg);
  }
  100% {
    fill: var(--color-allocation);
    stroke: none;
    transform: none;
  }
}

.electorateHex {
  will-change: opacity, transform, fill, stroke;
  fill: var(--color-allocation);
  stroke: none;
  stroke-width: $swHeavy;
  shape-rendering: crispEdges;
  transition: opacity $durationDefault, fill $durationAllocationChange, stroke $durationAllocationChange;
}

.root[data-is-interactive][data-layer='#{$Layer_ELECTORATES}'] .electorateHex {
  pointer-events: all;
  cursor: pointer;
}

.electorate[data-focus='#{$NoYes_Yes}'] .electorateHex {
  stroke: $color_Black;
}

.electorate[data-relative-allocation][data-focus='#{$NoYes_Yes}'] .electorateHex {
  stroke: var(--color-relative-allocation);
}

.electorate[data-has-definitive-allocation][data-focus='#{$NoYes_Yes}'] .electorateHex {
  stroke: none;
}

.electorate[data-was-allocation-preserved][data-focus='#{$NoYes_Yes}'] .electorateHex {
  stroke: var(--color-allocation);
}

.electorateHex[data-should-flip] {
  animation: electorateHexFlip $durationAllocationChange linear 1 both;
}

// Electorates (Hex Outlines)

.electorateHexOutline {
  fill: none;
  stroke: $color_White;
  stroke-width: $swLight;
  transition: stroke 0s #{$durationAllocationChange / 2};
}

.electorate[data-allocation='#{$Allocation_None}'] .electorateHexOutline {
  stroke: none;
}

// Electorates (Labels)

.electorateLabel {
  transform: rotate(30deg) translate(0, 0.3em);
  fill: $color_Text;
  font-size: 0.75rem;
  font-family: sans-serif;
  text-anchor: middle;
}

.root[data-is-single-state-layout] .electorateLabel {
  font-size: 0.875rem;
}

.root[data-is-single-state-layout] .electorate[data-has-long-label] .electorateLabel {
  font-size: 0.625rem;
}

.electorate[data-has-allocation] .electorateLabel {
  fill: $color_White;
}

// States (Borders)

.statesBorders {
  pointer-events: none;
  will-change: opacity;
  fill: none;
  stroke: $color_Black;
  stroke-width: $swMedium;
  transition: opacity $durationDefault;
}

.root:not([data-layer='#{$Layer_STATES}'])[data-has-focuses] .statesBorders {
  opacity: $opacityFadedOut;
}

// States (Labels)

.statesLabels {
  opacity: 1;
  pointer-events: none;
  font-size: 1.75rem; // Default for individual states
  transition: opacity #{$durationDefault / 2} #{$durationDefault / 2};
}

.root:not([data-layer='#{$Layer_STATES}']) .statesLabels {
  transition-delay: 0s;
}

.root[data-layout='#{$Layout_COUNTRY}'] .statesLabels,
.root[data-layout='#{$Layout_EXPLODED}'] .statesLabels,
.root[data-layout='#{$Layout_GRID}'] .statesLabels {
  font-size: 1.375rem;
}

.root:not([data-layer='#{$Layer_STATES}'])[data-layout='#{$Layout_COUNTRY}'] .statesLabels,
.root:not([data-layer='#{$Layer_STATES}'])[data-layout='#{$Layout_EXPLODED}'] .statesLabels {
  opacity: 0;
}

.stateLabel {
  transform: translate(0, 0.6em);
  text-anchor: middle;
  fill: $color_Text;
}

.root[data-layout='#{$Layout_COUNTRY}'] .stateLabel[data-state='ACT'],
.root[data-layout='#{$Layout_EXPLODED}'] .stateLabel[data-state='ACT'],
.root[data-layout='#{$Layout_COUNTRY}'] .stateLabel[data-state='NT'],
.root[data-layout='#{$Layout_EXPLODED}'] .stateLabel[data-state='NT'] {
  font-size: 0.8em;
}
