@import '../../lib/constants.scss';

// Root

.root {
  position: relative;
  width: 100%;
  height: 0;
  padding: 0;
  /* padding-bottom will be defined by JS */
}

@media (orientation: landscape) and (max-height: 50rem) {
  .root {
    padding-bottom: 0 !important;
    height: 32rem;
  }
}

@media (orientation: landscape) and (max-height: 25rem) {
  .root {
    padding-bottom: 0 !important;
    height: 16rem;
  }
}

.svg {
  position: absolute;
  height: 100%;
  width: 100%;
  left: 0;
  top: 0;
  stroke-linecap: round;
}

// Base (Outer)

.baseOuter {
  stroke: $color_Grey;
  // stroke-width: $swLight;
  stroke-width: $swMedium;
  fill: none;
  @include fadedOutTransitionable;

  @media (max-width: 667px) {
    // stroke-width: $swLight_SM;
    stroke-width: $swMedium_SM;
  }
}

.root[data-has-focuses] .baseOuter {
  @include fadedOut;
}

.root[data-has-focuses][data-is-inspecting] .baseOuter {
  @include fadedOutInspecting;
}

// Base (Inner)

.baseInner {
  stroke: $color_White;
  stroke-width: $swLight;
  fill: rgba(0, 0, 0, 0.025);

  @media (max-width: 667px) {
    stroke-width: $swLight_SM;
  }
}

// Electorates (Backgrounds)

.electoratesBackgrounds {
  pointer-events: none;
  shape-rendering: crispEdges;
}

.root:not([data-layer='#{$Layer_ELECTORATES}']) .electoratesBackgrounds {
  display: none;
}

.root[data-is-interactive] .electoratesBackgrounds {
  pointer-events: all;
}

.electorateBackground {
  @include fadedOutTransitionable;
}

.root[data-has-focuses] .electorateBackground[data-focus='#{$Focus_No}'] {
  @include fadedOut;
}

.root[data-has-focuses][data-is-inspecting] .electorateBackground[data-focus='#{$Focus_No}'] {
  @include fadedOutInspecting;
}

.electorateBackgroundPolygon {
  fill: $color_White;
  stroke: none;
  stroke-width: $swHeavy;
  stroke-linejoin: round;
  stroke-linecap: round;
  transition: fill $allocationTransitionDuration;

  @media (max-width: 667px) {
    stroke-width: $swHeavy_SM;
  }
}

.electorateBackgroundPolygon[data-allocation] {
  fill: var(--color-allocation);
}

@keyframes flipAllocations {
  0% {
    fill: $color_White;
    stroke: var(--color-relative-allocation);
    transform: none;
  }
  49.99% {
    fill: $color_White;
    stroke: var(--color-relative-allocation);
    // transform: rotateX(90deg);
    transform: rotateY(90deg);
  }
  50% {
    fill: var(--color-allocation);
    stroke: none;
    // transform: rotateX(-90deg);
    transform: rotateY(-90deg);
  }
  100% {
    fill: var(--color-allocation);
    stroke: none;
    transform: none;
  }
}

.electorateBackgroundPolygon[data-should-flip] {
  animation: flipAllocations $allocationTransitionDuration linear 1 both;
}

.root[data-is-interactive] .electorateBackgroundPolygon {
  cursor: pointer;
}

// Electorates (Borders)

.electoratesBorders {
  pointer-events: none;
}

.root:not([data-layer='#{$Layer_ELECTORATES}']) .electoratesBorders {
  display: none;
}

.electorateBorder {
  @include fadedOutTransitionable;
}

.root[data-has-focuses] .electorateBorder[data-focus='#{$Focus_No}'] {
  @include fadedOut;
}

.root[data-has-focuses][data-is-inspecting] .electorateBorder[data-focus='#{$Focus_No}'] {
  @include fadedOutInspecting;
}

.electorateBorderPolygon {
  pointer-events: none;
  fill: none;
  stroke: $color_LightGrey;
  stroke-width: $swLight;

  @media (max-width: 667px) {
    stroke-width: $swLight_SM;
  }
}

.electorateBorderPolygon[data-focus='#{$Focus_No}'][data-has-allocation],
.electorateBorderPolygon[data-focus='#{$Focus_Yes}'] {
  stroke: var(--color-focus);
}

.electorateBorderPolygon[data-focus='#{$Focus_Yes}'] {
  stroke-width: $swHeavy;

  @media (max-width: 667px) {
    stroke-width: $swHeavy_SM;
  }
}

.electorateBorderPolygon[data-focus='#{$Focus_Yes}'][data-relative-allocation] {
  stroke: var(--color-relative-allocation);
}

.electorateBorderPolygon[data-focus='#{$Focus_Yes}'][data-has-definitive-allocation] {
  stroke: none;
}

.electorateBorderPolygon[data-focus='#{$Focus_Yes}'][data-was-preserved] {
  stroke: var(--color-allocation);
}

// Electorates (Partitions)

.electoratesPartitions {
  pointer-events: none;
  opacity: 0;
}

.root:not([data-layer='#{$Layer_ELECTORATES}']) .electoratesPartitions {
  display: none;
}

.root[data-has-focuses] .electoratesPartitions {
  opacity: 1;
}

.electoratePartition {
  fill: none;
  stroke: none;
  stroke-width: $swLight;

  @media (max-width: 667px) {
    stroke-width: $swLight_SM;
  }
}

.electoratePartition[data-focus='#{$Focus_Yes}'],
.electoratePartition[data-focus='#{$Focus_No}'][data-has-definitive-allocation] {
  stroke: $color_BG;
}

.root[data-has-focuses] .electoratePartition[data-focus='#{$Focus_No}'] {
  stroke: none;
}

// Electorates (Labels)

.electoratesLabels {
  pointer-events: none;
  font-size: 0.8rem;
  font-family: sans-serif;
}

.root[data-is-single-state-layout] .electoratesLabels {
  font-size: 0.55rem;
}

.electorateLabel {
  transform: rotate(30deg) translate(0, 0.3em);
  text-anchor: middle;
  fill: $color_Text;
}

.electorateLabel[data-has-allocation] {
  fill: $color_White;
}

.root[data-is-single-state-layout] .electorateLabel[data-has-long-label] {
  font-size: 0.7em;
}

// States (Backgrounds)

.statesBackgrounds {
  pointer-events: none;
  fill: $color_White;
  stroke: none;
}

.root:not([data-layer='#{$Layer_STATES}']) .statesBackgrounds {
  display: none;
}

// States (Borders)

.statesBorders {
  pointer-events: none;
  fill: none;
  stroke: $color_Black;
  stroke-width: $swLight;

  @media (max-width: 667px) {
    stroke-width: $swLight_SM;
  }
}

.root:not([data-layer='#{$Layer_STATES}']) .statesBorders {
  display: none;
}

// States (Labels)

.statesLabels {
  pointer-events: none;
  font-size: 1.375rem;
}

.root:not([data-layer='#{$Layer_STATES}'])[data-layout='#{$Layout_COUNTRY}'] .statesLabels,
.root:not([data-layer='#{$Layer_STATES}'])[data-layout='#{$Layout_EXPLODED}'] .statesLabels {
  display: none;
}

.root[data-layout='#{$Layout_GRID}'] .statesLabels {
  font-size: 2rem;
}

.stateLabel {
  transform: translate(0, 0.6em);
  text-anchor: middle;
  fill: $color_Text;
}

.root[data-layout='#{$Layout_COUNTRY}'] .stateLabel[data-state='ACT'],
.root[data-layout='#{$Layout_EXPLODED}'] .stateLabel[data-state='ACT'],
.root[data-layout='#{$Layout_COUNTRY}'] .stateLabel[data-state='NT'],
.root[data-layout='#{$Layout_EXPLODED}'] .stateLabel[data-state='NT'] {
  font-size: 0.8em;
}
