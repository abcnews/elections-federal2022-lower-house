@import '../../lib/constants.scss';

.root {
  display: flex;
  flex-wrap: wrap;
  gap: 0.25em 0.5em;
  font-size: 0.75rem;
  margin-top: 2em;
  line-height: 1.5;
}

@media (min-width: 668px) and (min-height: 480px) {
  .root {
    font-size: 1rem;
  }
}

.root > * > * {
  height: 1.5em;
}

.root > * > * + * {
  margin-top: 0.25em;
}

.labels {
  text-align: right;
}

.counts {
  flex: 1 1 auto;
  position: relative;
}

.count {
  position: relative;
  overflow: hidden;
  background-color: rgba(0, 0, 0, 0.025);
}

.track {
  position: relative;
  width: 100%;
  height: 100%;
}

.bar {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.root[data-should-transition] .bar {
  transition: transform $durationAllocationChange;
}

.bar[data-allocation] {
  background-color: var(--color-allocation);
}

// Option A: Vary opacity (appears lighter)
// .bar[data-is-uncertain] {
//   opacity: 0.25;
// }

// Option B: Switch to stroke (like hexes)
// .bar[data-is-uncertain] {
//   border: 2px solid var(--color-allocation);
//   background-color: white;
// }

// Option C: Use diagonal pattern
.bar[data-is-uncertain] {
  background-size: 5px 5px;
  background-image: repeating-linear-gradient(45deg, #ffffff 0, #ffffff 1.5px, transparent 0, transparent 50%);
}

.value {
  color: $color_White;
  position: absolute;
  right: 0.25em;
  height: 100%;
  font-weight: bold;
  letter-spacing: 0.0625em;
}

.bar[data-is-single-digit-count] .value {
  right: auto;
  left: calc(100% + 0.25em);
  color: $color_Black;
  text-shadow: 0 0 2px $color_White, 0 0 1px $color_White;
}

.win {
  position: absolute;
  bottom: -0.5em;
  left: 0;
  margin: 0;
  width: 100%;
  height: calc(100% + 1em);
}

.winLine {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-right: 0.0625rem dashed $color_Grey;
  z-index: -1;
}

.winLabel {
  transform: translate(50%, 0);
  position: absolute;
  bottom: 100%;
  right: 0;
}

.maxLabel {
  flex: 1 0 100%;
  text-align: center;
}
